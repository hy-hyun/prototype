---
alwaysApply: true
description: hy-path 프로젝트 Svelte 5 룬모드 기반 코딩 스타일과 금지 규칙을 강제합니다
---

# 🎨 hy-path 코딩 스타일 (Svelte 5 룬모드)

이 규칙은 프로젝트 전반에 항상 적용됩니다. 세부 배경과 예시는 [coding-style.md](mdc:.cursorrules/coding-style.md)를 참고하세요.

## 🚀 필수: Svelte 5 룬모드만 사용
- **반드시** 룬 사용: `$state`, `$derived`, `$effect`, `$props`
- **절대 금지**: Svelte 4 방식 (`export let`, 반응형 구문 `$:`, `onMount/beforeUpdate` 등 생명주기, 구식 상태갱신)

### 상태와 Props
- 상태는 `let x = $state(initial)`로만 선언/갱신
- Props는 `let { ... } = $props()`로만 수신하며 기본값은 구조분해에서 지정

### 파생값과 효과
- 파생값은 `$derived(expr)`로 정의 (중복계산 방지)
- 부작용은 `$effect(() => { ... })`로만 처리, 필요 시 조건문으로 범위 제한

## 🏗️ 구조와 Import 순서
1. 외부 라이브러리
2. 내부 유틸/컴포넌트
3. 타입(`import type`) 선언
4. `const`/설정 상수
5. `let` 상태 (`$state`)
6. 파생 상태 (`$derived`)
7. 함수 정의
8. 효과 (`$effect`)

## 🎯 네이밍
- 변수/함수: `camelCase`
- 컴포넌트: `PascalCase`
- 상수: `UPPER_SNAKE_CASE`

## 🔍 TypeScript
- 공개 API/컴포넌트 Props/반환 타입은 명시적으로 주석
- 복잡한 제어 흐름에는 의미 있는 변수로 조건 분해
- 공용 타입은 `src/lib/types.ts`에 정의 후 참조

## 🎨 마크업/템플릿
- 조건부는 `{#if ...}{:else if ...}{:else}{/if}`
- 반복은 key가 있는 `{#each items as item (item.id)}`
- 이벤트 핸들러는 짧은 화살표 함수만 사용: `onclick={() => doX()}`
- 양방향 바인딩: `bind:value={state}`

## 💅 CSS
- 컴포넌트 스코프 스타일 우선
- 클래스 네이밍은 BEM 권장: `block`, `block__elem`, `block--mod`
- 반응형은 의미 있는 임계값에서 `@media` 사용

## 🚫 금지 사항
- Svelte 4 스타일 상태/Props: `let x = 0`, `export let x`
- 반응형 구문 `$:` 및 그 파생 사용 전부
- `onMount`, `beforeUpdate` 등 생명주기 API 사용
- 불필요한 인라인 스타일/장문 인라인 이벤트 핸들러

## ✅ PR 체크리스트
- [ ] `$state`/`$derived`/`$effect`/`$props`만 사용했는가?
- [ ] Svelte 4 구문/생명주기 제거했는가?
- [ ] 네이밍/Import 순서를 지켰는가?
- [ ] 타입이 명확하고 `src/lib/types.ts`를 재사용했는가?
- [ ] 스코프 CSS와 BEM을 따랐는가?
- [ ] 접근성/반응형을 고려했는가?

## 🛠️ 도구 설정
- 에디터 확장: Svelte for VS Code, Prettier, ESLint, TypeScript Importer
- Prettier는 다음 설정을 기준으로 함:

```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "svelteSortOrder": "options-scripts-markup-styles",
  "svelteStrictMode": false,
  "plugins": ["prettier-plugin-svelte"]
}
```

